{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bipeen89"
		},
		"empinput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'empinput'"
		},
		"empoutput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'empoutput'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Calculate average salary from employee data using Power Query",
				"activities": [
					{
						"name": "AverageEmployeeSalary",
						"description": "Calculate average salary from employee data",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EmployeeSalaryDemo",
								"type": "DataFlowReference",
								"datasetParameters": {
									"EmployeeInfo": {},
									"EmployeeSalary": {},
									"EmployeeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "EmployeeSink",
											"dataset": {
												"referenceName": "EmployeeSink",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SanitizedEmployeeData'],\n\ttruncate: true) ~> EmployeeSink"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "EmployeeDemo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EmployeeSalaryDemo')]",
				"[concat(variables('factoryId'), '/datasets/EmployeeSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeInfo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "empinput",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "EmployeeDemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeInfo.csv",
						"container": "empstore"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeId",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "ZIP",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "DateOfJoining",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/empinput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeSalary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "empinput",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "EmployeeDemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeSalary.csv",
						"container": "empstore"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeId",
						"type": "String"
					},
					{
						"name": "BasePay",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/empinput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "empoutput",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "EmployeeDemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "empstore"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/empoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empinput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('empinput_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/empoutput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('empoutput_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeSalaryDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "EmployeeInfo",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmployeeInfo",
							"dataset": {
								"referenceName": "EmployeeInfo",
								"type": "DatasetReference"
							}
						},
						{
							"name": "EmployeeSalary",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmployeeSalary",
							"dataset": {
								"referenceName": "EmployeeSalary",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared EmployeeInfo = let AdfDoc = AzureStorage.BlobContents(\"https://demo7878uiuk.blob.core.windows.net/empstore/EmployeeInfo.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared EmployeeSalary = let AdfDoc = AzureStorage.BlobContents(\"https://demo7878uiuk.blob.core.windows.net/empstore/EmployeeSalary.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let\r\n  Source = EmployeeInfo,\r\n  JoinTransformation = Table.NestedJoin(Source, {\"EmployeeId\"}, EmployeeSalary, {\"EmployeeId\"}, \"EmployeeSalary\", JoinKind.Inner),\r\n  ExpandColumns = Table.ExpandTableColumn(JoinTransformation, \"EmployeeSalary\", {\"BasePay\"}, {\"EmployeeSalary.BasePay\"}),\r\n  RemoveColumns = Table.RemoveColumns(ExpandColumns, {\"EmployeeId\", \"FirstName\", \"LastName\", \"ZIP\", \"State\", \"DateOfJoining\"}),\r\n  ReplacedQuotes = Table.ReplaceValue(RemoveColumns, \"\"\"\", \"\", Replacer.ReplaceText, {\"City\", \"Email\"}),\r\n  #\"Inserted conditional column\" = Table.AddColumn(ReplacedQuotes, \"SanitizedEmail\", each if not Text.Contains([Email], \"@\") then \"\" else if not Text.Contains([Email], \".\") then \"\" else [Email]),\r\n  RemoveEmailColumn = Table.RemoveColumns(#\"Inserted conditional column\", {\"Email\"}),\r\n  ConvertIdToNumber = Table.TransformColumnTypes(RemoveEmailColumn, {{\"EmployeeSalary.BasePay\", type number}}),\r\n  RemoveRowsWithEmptyEmail = Table.SelectRows(ConvertIdToNumber, each [SanitizedEmail] <> null and [SanitizedEmail] <> \"\"),\r\n  AverageSalaryByCity = Table.Group(RemoveRowsWithEmptyEmail, {\"City\"}, {{\"AverageSalary\", each List.Average([EmployeeSalary.BasePay]), type number}}),\r\n  #\"Filtered rows\" = Table.SelectRows(AverageSalaryByCity, each [AverageSalary] <> null and [AverageSalary] <= 200000)\r\nin\r\n  #\"Filtered rows\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeInfo')]",
				"[concat(variables('factoryId'), '/datasets/EmployeeSalary')]"
			]
		}
	]
}